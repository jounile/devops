# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="q[HXV]Nk7lnC9=VUp0>]6?<WwDgT1<Os6/?1T172nHZFjx^?tE@GQJtEZYd@cpyN"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
#logger.root=ERROR

# Logger used by the framework:
#logger.play=INFO

# Logger provided to your application:
#logger.application=DEBUG

# Simple configuration (by URI)
#mongodb.uri = "mongodb://localhost:27017/reactivemongo-db-blog"

test.application="not-test"
blog.user.name="CHANGE ME!"
blog.user.name=${?USER}

dbplugin = disabled
evolutionplugin = disabled
ehcacheplugin = disabled

#mongodb.default.db = "mydb"
# Optional values
#mongodb.default.host = "127.0.0.1"
#mongodb.default.port = 27017
#mongodb.default.user = "leon"
#mongodb.default.password = "123456"

# MongoURI
# ~~~~~
# a MongoURI can also be used http://www.mongodb.org/display/DOCS/Connections
# mongodb.default.uri = "mongodb://127.0.0.1:27017,mongodb.org:1337/salat-test"

# WriteConcern
# ~~~~~
# Can be any of the following
#
# fsyncsafe - Exceptions are raised for network issues and server errors; Write operations wait for the server to flush data to disk.
# replicassafe - Exceptions are raised for network issues and server errors; waits for at least 2 servers for the write operation.
# safe - Exceptions are raised for network issues and server errors; waits on a server for the write operation.
# normal - Exceptions are raised for network issues but not server errors.

#mongodb.default.writeconcern = "safe"

# Replica sets
# ~~~~~
# http://www.mongodb.org/display/DOCS/Why+Replica+Sets
#
# To user a replicaset instead of a single host, omit optional values and use the configuration below instead.
# Since replica sets use public key authentication, user and password won't work together with the replicaset option.

#mongodb.default.replicaset {
#    host1.host = "10.0.0.1"
#
#    host2.host = "10.0.0.2"
#    host2.port = 27018
#}



# Site details

title="Collective DevOps adventure"
year="2016"
siili="Siili Solutions Oyj"


#Technologies

first.header="Play with Scala"
first.text="Play Framework makes it easy to build web applications with Java & Scala. Play is based on a lightweight, stateless, web-friendly architecture. Built on Akka, Play provides predictable and minimal resource consumption (CPU, memory, threads) for highly-scalable applications."

second.header="Travis CI"
second.text="Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub."

third.header="Heroku"
third.text="Heroku is a cloud platform based on a managed container system, with integrated data services and a powerful ecosystem, for deploying and running modern apps. The Heroku developer experience is an app-centric approach for software delivery, integrated with today’s most popular developer tools and workflows."

fourth.header="GitHub"
fourth.text="GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere."


# Carousel

#first.carusel.header="Today´s technology stack"
#first.carusel.text="Scala, Play, Travis CI, GitHub & Heroku are the technologies inluded in this excersice."

#second.carusel.header="We put icing on the cake with Bootstrap"
#second.carusel.text="Bootstrap is the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web."

#third.carusel.header="We use specs2 for testing our application"
#third.carusel.text="Writing tests for your application can be an involved process. Play provides a default test framework for you, and provides helpers and application stubs to make testing your application as easy as possible."

first.carusel.header="Travis CI"
first.carusel.text="Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub."

second.carusel.header="GitHub"
second.carusel.text="GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere."

third.carusel.header="Heroku"
third.carusel.text="Heroku is a cloud platform based on a managed container system, with integrated data services and a powerful ecosystem, for deploying and running modern apps. The Heroku developer experience is an app-centric approach for software delivery, integrated with today’s most popular developer tools and workflows."

fourth.carusel.header="Scala"
fourth.carusel.text="Scala is a general-purpose programming language. Scala has full support for functional programming and a very strong static type system."

fifth.carusel.header="Play framework"
fifth.carusel.text="Play is based on a lightweight, stateless, web-friendly architecture."

# Links

twitter.link="https://twitter.com/SiiliSolutions"
linkedin.link="https://www.linkedin.com/company/siili-solutions"
website.link="http://www.siili.com"

